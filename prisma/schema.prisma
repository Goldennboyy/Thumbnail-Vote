// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Thumbnail     Thumbnail[]
    VoteThumbnail Vote[]
    Comment       Comment[]
    // Following     Following[]     @relation("following", references: [followerId])
    // Followers     Following[]     @relation("followers", references: [followingId])
}

// ToDO implement following and followers

//     model Following {
//     id          String  @id @default(cuid())
//     follower    User    @relation("follower", fields: [followerId], references: [id])
//     followerId  String
//     following   User    @relation("followingUser", fields: [followingId], references: [id])
//     followingId String
//     User        User?   @relation(fields: [userId], references: [id])
//     userId      String?

//     @@unique([followerId, followingId])
// }

model Thumbnail {
    id        String    @id @default(cuid())
    title     String    @unique
    image     String    @unique
    userId    String
    createdAt DateTime  @default(now())
    // relations with users one to many 
    user      User      @relation(fields: [userId], references: [id])
    Vote      Vote[]
    Comment   Comment[]
}

model Vote {
    id          String    @id @default(cuid())
    voteCount   Int       @default(0)
    thumbnailId String    @unique
    userId      String    @unique
    // relations 
    thumbnail   Thumbnail @relation(fields: [thumbnailId], references: [id], onDelete: Cascade)
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
    id          String @id @default(cuid())
    content     String
    userId      String
    thumbnailId String

    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    thumbnail Thumbnail @relation(fields: [thumbnailId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
